--Column Aliases and concatenation operator

SELECT * FROM EMPLOYEES;

SELECT FIRST_NAME, LAST_NAME, (FIRST_NAME || ' ' || LAST_NAME) AS "EMPLOYEE NAME", 
SALARY,  (SALARY * 12) AS "ANNUAL SALARY",
PHONE_NUMBER AS MOBILE,
PHONE_NUMBER AS MOBILE_NUMBER,
PHONE_NUMBER AS "MOBILE NUMBER"
  FROM EMPLOYEES;
  
--Using Literal Character Strings

SELECT FIRST_NAME  || ' ' ||  'is' || ' ' || JOB_ID AS "EMPLOYEE DETAILS"
  FROM EMPLOYEES; 

SELECT FIRST_NAME || ' '|| LAST_NAME  || ' ' ||  'is' || ' ' || JOB_ID AS "EMPLOYEE DETAILS"
  FROM EMPLOYEES; 
 
--Column Aliases and concatenation operator

SELECT * FROM EMPLOYEES;

SELECT FIRST_NAME, LAST_NAME, (FIRST_NAME || LAST_NAME) AS "EMPLOYEE NAME", 
SALARY,  (SALARY * 12) AS "ANNUAL SALARY" ,
PHONE_NUMBER AS MOBILE,
PHONE_NUMBER AS MOBILE_NUMBER,
PHONE_NUMBER AS "MOBILE NUMBER"
  FROM EMPLOYEES;
  
--Using Literal Character Strings

SELECT FIRST_NAME  || ' ' ||  'is' || ' ' || JOB_ID AS "EMPLOYEE DETAILS"
  FROM EMPLOYEES; 

SELECT FIRST_NAME || ' '|| LAST_NAME  || ' ' ||  'is' || ' ' || JOB_ID AS "EMPLOYEE DETAILS"
  FROM EMPLOYEES; 
 
SELECT FIRST_NAME || ' '|| LAST_NAME  || ' ' ||  'earns a salary of' || ' ' || SALARY AS "EMPLOYEE DETAILS"
  FROM EMPLOYEES; 
================================================================================================
SELECT DISTINCT OWNER FROM DBA_OBJECTS;
SELECT OWNER,TABLE_NAME FROM ALL_TABLES;

SELECT OWNER,TABLE_NAME FROM ALL_TABLES WHERE TABLE_NAME = 'EMPLOYEES';
========================================================================================
--Difference between ORDER BY :

ORDER BY COL1
ORDER BY COL1,COL2
ORDER BY COL1,COL2,COL3

SELECT * FROM EMPLOYEES;

SELECT * FROM EMPLOYEES ORDER BY 2;
SELECT * FROM EMPLOYEES ORDER BY 2,3;
SELECT * FROM EMPLOYEES ORDER BY 2,3,4;

SELECT * FROM PRIME_INTUIT1 ORDER BY 2;
SELECT * FROM PRIME_INTUIT1 ORDER BY 2,4;
SELECT * FROM PRIME_INTUIT1 ORDER BY 2,4,7;

=====================================================================================

--Sort the country names in ascending order except the country - INDIA

SELECT * FROM COUNTRIES;
SELECT * FROM COUNTRIES ORDER BY COUNTRY_NAME;

SELECT * FROM COUNTRIES ORDER BY COUNTRY_ID, COUNTRY_NAME;

SELECT * FROM COUNTRIES
ORDER BY 
 (CASE WHEN COUNTRY_NAME = 'India' THEN 0 ELSE 1 END) ,
 COUNTRY_NAME ;

SELECT * FROM COUNTRIES
ORDER BY 
(CASE WHEN COUNTRY_NAME = 'India' THEN 0 
      WHEN COUNTRY_NAME = 'Singapore' THEN 1
 ELSE 2 END),
COUNTRY_NAME ;

SELECT * FROM COUNTRIES;
SELECT * FROM COUNTRIES ORDER BY COUNTRY_NAME;

SELECT * FROM COUNTRIES
ORDER BY COUNTRY_ID, COUNTRY_NAME;

SELECT * FROM COUNTRIES
ORDER BY 
(CASE WHEN COUNTRY_NAME = 'India' THEN 0 ELSE 1 END),
COUNTRY_NAME ;

SELECT * FROM COUNTRIES
ORDER BY 
(CASE WHEN COUNTRY_NAME = 'India' THEN 0 
      WHEN COUNTRY_NAME = 'Singapore' THEN 1
 ELSE 2 END),
COUNTRY_NAME ;

==================================================================================
/* COMPOSITE PRIMARY KEY: 
A key which has multiple attributes to uniquely identify rows in a table 
and a composite primary key can contain a maximum of 16 columns.*/

SELECT * FROM PIB3_STUDENTS;

--DROP table PIB3_STUDENTS;
CREATE TABLE PIB3_STUDENTS (
    ROLLNUMBER  NUMBER(4),
    NAME        VARCHAR(50),
    COURSE      VARCHAR(50),
    MOBILE      NUMBER(10),
    PLACE       VARCHAR(50),
    PRIMARY KEY (ROLLNUMBER,COURSE)
);

DESC PIB3_STUDENTS;
SELECT * FROM PIB3_STUDENTS;
--TRUNCATE TABLE PIB3_STUDENTS;

--INSERT INTO PIB3_STUDENTS VALUES (&ROLLNUMBER, '&NAME', '&COURSE', &MOBILE);

INSERT INTO PIB3_STUDENTS (ROLLNUMBER, NAME, COURSE, MOBILE,PLACE) 
VALUES (201, 'RAVI','BBA', 9988774455,'MYSURU');
INSERT INTO PIB3_STUDENTS (ROLLNUMBER, NAME, COURSE, MOBILE,PLACE) 
VALUES (202, 'RAMU','BCA', 9988112233,'MANDYA');
INSERT INTO PIB3_STUDENTS (ROLLNUMBER, NAME, COURSE, MOBILE,PLACE) 
VALUES (203, 'MOHAN','BBA', 9988777755,'BENGALURU');
INSERT INTO PIB3_STUDENTS (ROLLNUMBER, NAME, COURSE, MOBILE,PLACE) 
VALUES (204, 'SEETHA','BE', 9955663322,'BENGALURU');

INSERT INTO PIB3_STUDENTS (ROLLNUMBER, NAME, COURSE, MOBILE,PLACE) 
VALUES (204, 'SEETHA','MBA', 9955663322,'BENGALURU');

INSERT INTO PIB3_STUDENTS (ROLLNUMBER, NAME, COURSE, MOBILE,PLACE) 
VALUES (201, 'RAVI','MBA', 9955663322,'MYSURU');

SELECT * FROM PIB3_STUDENTS ORDER BY 1;

--DISTINCT

SELECT * FROM PIB3_STUDENTS;
SELECT DISTINCT NAME FROM PIB3_STUDENTS;
SELECT DISTINCT NAME,COURSE FROM PIB3_STUDENTS;

--2ND EXAMPLE -  EMPLOYEE TABLE:

--DROP TABLE PI_COMPKEY_EMPLOYEES;
CREATE TABLE PI_COMPKEY_EMPLOYEES(
EMPLOYEE_NO NUMBER(4),
EMPLOYEE_NAME VARCHAR2(50),
EMPLOYEE_CITY VARCHAR2(50),
EMPLOYEE_DEPT VARCHAR2(50),
EMPLOYEE_PHN NUMBER(10) PRIMARY KEY (EMPLOYEE_NO,EMPLOYEE_DEPT));  

DESC PI_COMPKEY_EMPLOYEES;
SELECT * FROM PI_COMPKEY_EMPLOYEES;

--TRUNCATE TABLE PI_COMPKEY_EMPLOYEES;

INSERT INTO PI_COMPKEY_EMPLOYEES
VALUES(&EMPLOYEE_NO,'&EMPLOYEE_NAME','&EMPLOYEE_CITY','&EMPLOYEE_DEPT',&EMPLOYEE_PHN);

INSERT INTO PI_COMPKEY_EMPLOYEES VALUES (101,'ABHILASH','MYSURU','HR',9878899081);
INSERT INTO PI_COMPKEY_EMPLOYEES VALUES (102,'BHUVAN','KOLLEGAL','ADMIN',9089787773);
INSERT INTO PI_COMPKEY_EMPLOYEES VALUES (103,'CHAITRA','MYSURU','HR',9878899082);
INSERT INTO PI_COMPKEY_EMPLOYEES VALUES (104,'DEEPAK','BENGALURU','IT',9089787777);

INSERT INTO PI_COMPKEY_EMPLOYEES VALUES (105,'PRAKASH','BENGALURU','IT',9089789055);
INSERT INTO PI_COMPKEY_EMPLOYEES VALUES (105,'PRAKASH','BENGALURU','PRESALES',9089789055);
INSERT INTO PI_COMPKEY_EMPLOYEES VALUES (105,'PRAKASH','BENGALURU','IMPLEMENTATION',9089789055);

SELECT * FROM PI_COMPKEY_EMPLOYEES;
SELECT DISTINCT employee_name FROM PI_COMPKEY_EMPLOYEES;
SELECT DISTINCT employee_name,employee_city FROM PI_COMPKEY_EMPLOYEES;

--UPDATE PI_COMPKEY_EMPLOYEES SET EMPLOYEE_NO = 101 WHERE EMPLOYEE_NO = 1;

================================================================================
--UNION Operator:
/*The Oracle UNION operator is used to combine the result sets of 2 or more Oracle 
SELECT statements.It removes duplicate rows between the various SELECT statements.

Each SELECT statement within the UNION operator must have the same number of fields 
in the result sets with similar data types.
*/

SELECT * FROM PIB3_SUPPLIERS;
SELECT * FROM PIB3_ORDERS;

SELECT SUPPLIER_ID
FROM PIB3_SUPPLIERS
UNION
SELECT SUPPLIER_ID
FROM PIB3_ORDERS;

SELECT SUPPLIER_ID
FROM PIB3_SUPPLIERS
UNION
SELECT SUPPLIER_ID
FROM PIB3_ORDERS
ORDER BY SUPPLIER_ID;

--UNION ALL

/*
The Oracle UNION ALL operator is used to combine the result sets of 2 or more SELECT 
statements. It returns all rows from the query and it does not remove duplicate rows 
between the various SELECT statements.

Each SELECT statement within the Oracle UNION ALL operator must have the same number 
of fields in the result sets with similar data types.
*/
SELECT SUPPLIER_ID
FROM PIB3_SUPPLIERS
UNION ALL
SELECT SUPPLIER_ID
FROM PIB3_ORDERS
ORDER BY SUPPLIER_ID;

================================================================================
--INTERSECT 
/* If a record exists in one query and not in the other, 
    it will be omitted from the INTERSECT results.*/

SELECT SUPPLIER_ID
FROM PIB3_SUPPLIERS
INTERSECT
SELECT SUPPLIER_ID
FROM PIB3_ORDERS
ORDER BY SUPPLIER_ID;

================================================================================
--MINUS Query
/*The Oracle MINUS operator is used to return all rows in the first SELECT statement that 
are not returned by the second SELECT statement.*/

SELECT SUPPLIER_ID
FROM PIB3_SUPPLIERS
MINUS
SELECT SUPPLIER_ID
FROM PIB3_ORDERS
ORDER BY SUPPLIER_ID ;

SELECT SUPPLIER_ID
FROM PIB3_ORDERS
MINUS
SELECT SUPPLIER_ID
FROM PIB3_SUPPLIERS
ORDER BY SUPPLIER_ID;

--SOURCE
SELECT EMPLOYEE_ID,SALARY
FROM EMPLOYEES 
MINUS 
--TARGET
SELECT EMPLOYEE_ID,SALARY
FROM EMPLOYEES; 
================================================================================

/*
ROWID AND ROWNUM - PSEUDO COLUMNS

For each row in the database, the ROWID pseudocolumn returns the address of the row. 
Usually, a rowid value uniquely identifies a row in the database. 

However, rows in different tables that are stored together in the same cluster can have 
the same rowid. Values of the ROWID pseudocolumn have the datatype ROWID or UROWID. 

Rowid values have several important uses:
They are the fastest way to access a single row.
They can show you how the rows in a table are stored.
They are unique identifiers for rows in a table.
*/

SELECT ROWID, E.*   FROM EMPLOYEES E;

SELECT ROWID, FIRST_NAME, LAST_NAME , SALARY 
  FROM EMPLOYEES  
 WHERE DEPARTMENT_ID = 20;

--  ** ROWID gets removed only when the records are deleted from the table.

--ROWNUM:
/*
For each row returned by a query, the ROWNUM pseudocolumn returns a number indicating 
the order in which Oracle selects the row from a table or set of joined rows. 
The first row selected has a ROWNUM of 1, the second has 2, and so on.

You can use ROWNUM to limit the number of rows returned by a query, as in this example:
*/

SELECT * FROM employees WHERE ROWNUM < 10;

SELECT ROWID, ROWNUM, FIRST_NAME, LAST_NAME , SALARY 
  FROM EMPLOYEES  
 WHERE DEPARTMENT_ID = 80;
 
SELECT ROWID, ROWNUM, FIRST_NAME, LAST_NAME , SALARY 
  FROM EMPLOYEES  
 WHERE SALARY > 5000;

--ALSO,

SELECT * FROM PIB3_SUPPLIERS;
SELECT ROWID, ROWNUM, S.* FROM PIB3_SUPPLIERS S;
INSERT INTO PIB3_SUPPLIERS VALUES ( 106, 'ABCD');
SELECT ROWID, ROWNUM, S.* FROM PIB3_SUPPLIERS S;
DELETE FROM PIB3_SUPPLIERS WHERE SUPPLIER_ID = 106;

================================================================================

/* TO DELETE DUPLICATE RECORDS IN A TABLE */
        --SIMPLE SUBQUERY method:

SELECT * FROM EMPLOYEES;
--DROP TABLE PI_EMPLOYEES_TEMP;
CREATE TABLE PIB3_EMPLOYEES_TEMP AS SELECT * FROM EMPLOYEES;

SELECT COUNT(*) FROM PIB3_EMPLOYEES_TEMP;   --115
--constraints
SELECT * FROM USER_CONS_COLUMNS WHERE TABLE_NAME = 'EMPLOYEES';
SELECT * FROM USER_CONS_COLUMNS WHERE TABLE_NAME = 'PIB3_EMPLOYEES_TEMP';

Insert into PIB3_EMPLOYEES_TEMP (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) 
values (208,'Preetham','Krishna','pk@gmail.com','515.123.4567',to_date('17-JUN-03','DD-MON-RR'),
'AD_PRES',23000,null,null,null);

Insert into PIB3_EMPLOYEES_TEMP (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) 
values (209,'Kushal','Shetty','ks@gmail.com','515.123.4567',to_date('17-JUN-03','DD-MON-RR'),
'AD_PRES',22000,null,null,null);

Insert into PIB3_EMPLOYEES_TEMP (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) 
values (210,'Tejaswini','Aradhya','ta@gmail.com','515.123.4567',to_date('17-JUN-03','DD-MON-RR'),
'AD_PRES',21000,null,null,null);

Insert into PIB3_EMPLOYEES_TEMP (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) 
values (210,'Tejaswini','Aradhya','ta@gmail.com','515.123.4567',to_date('17-JUN-03','DD-MON-RR'),
'AD_PRES',21000,null,null,null);

UPDATE PIB3_EMPLOYEES_TEMP SET FIRST_NAME = 'Kiran' where employee_id = 210;
UPDATE PIB3_EMPLOYEES_TEMP SET LAST_NAME = 'Prasad' where employee_id = 210;
commit;

SELECT * FROM PIB3_EMPLOYEES_TEMP;
SELECT * FROM PIB3_EMPLOYEES_TEMP ORDER BY 1 DESC;

--STEP 1: WILL CHECK THE COUNT OF RECORDS

SELECT EMPLOYEE_ID,COUNT(*)
FROM PIB3_EMPLOYEES_TEMP
GROUP BY EMPLOYEE_ID
ORDER BY 1 desc;

--STEP 2: WILL USE PSEUDO COLUMNS TO IDENTIFY THE UNIQUE RECORDS WHICH ARE SYSTEM GENERATED

/* ROWID - PSEUDO COLUMN is used to delete the duplicate records by using aggregate function.
   Either we need to retain the max rowid or min rowid - group function
*/

SELECT EMPLOYEE_ID, ROWID ,ROWNUM
  FROM PIB3_EMPLOYEES_TEMP 
ORDER BY 1 desc;

SELECT EMPLOYEE_ID,ROWID 
  FROM PIB3_EMPLOYEES_TEMP 
ORDER BY 1 desc;

--STEP 3:WILL FIND THE MAX OR MIN ROWID TO PICK THE SINGLE RECORD OUT OF DUPLICATES

SELECT EMPLOYEE_ID, MAX(ROWID) 
  FROM PIB3_EMPLOYEES_TEMP 
GROUP BY EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,
         JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID
ORDER BY 1 desc;

--or

SELECT EMPLOYEE_ID, MIN(ROWID) 
  FROM PIB3_EMPLOYEES_TEMP 
GROUP BY EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,
         JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID
ORDER BY 1 desc;

--STEP 5: WILL FIND THE EXTRA RECORDS OUT OF THE DUPLICATES

SELECT * FROM PIB3_EMPLOYEES_TEMP WHERE ROWID NOT IN
(SELECT MAX (ROWID) FROM PIB3_EMPLOYEES_TEMP 
GROUP BY EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE, 
JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) ; 

--STEP 6: FINALLY, DELETE THE DUPLICATE RECORDS FROM THE TABLE

DELETE FROM PIB3_EMPLOYEES_TEMP WHERE ROWID NOT IN
 (SELECT MAX(ROWID)FROM PIB3_EMPLOYEES_TEMP 
    GROUP BY EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,
             JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID);
             
--FINAL STEP:

SELECT EMPLOYEE_ID,COUNT(*) 
FROM PIB3_EMPLOYEES_TEMP
GROUP BY EMPLOYEE_ID
ORDER BY 1 desc;

================================================================================

--SIMPLE EXAMPLE FOR YOUR LEARNING:

SELECT * FROM PI_SUPPLIERS;

--DROP TABLE PI_SUPPLIERS_TEMP;
CREATE TABLE PI_SUPPLIERS_TEMP AS SELECT * FROM PI_SUPPLIERS;

SELECT * FROM PI_SUPPLIERS_TEMP ORDER BY 1;

--INSERT VALUES--PI_SUPPLIERS:

INSERT INTO PI_SUPPLIERS_TEMP VALUES(1001,'Hewlett Packard');
INSERT INTO PI_SUPPLIERS_TEMP VALUES(1001,'Hewlett Packard');
INSERT INTO PI_SUPPLIERS_TEMP VALUES(1001,'Hewlett Packard');
INSERT INTO PI_SUPPLIERS_TEMP VALUES(1001,'Hewlett Packard');
INSERT INTO PI_SUPPLIERS_TEMP VALUES(1001,'Hewlett Packard');
INSERT INTO PI_SUPPLIERS_TEMP VALUES(1002,'Microsoft');
INSERT INTO PI_SUPPLIERS_TEMP VALUES(1003,'NVIDIA');
INSERT INTO PI_SUPPLIERS_TEMP VALUES(1003,'NVIDIA');
INSERT INTO PI_SUPPLIERS_TEMP VALUES(1004,'LENOVA');
INSERT INTO PI_SUPPLIERS_TEMP VALUES(1004,'LENOVA');
INSERT INTO PI_SUPPLIERS_TEMP VALUES(1004,'LENOVA');

SELECT * FROM PI_SUPPLIERS_TEMP ORDER BY 1;

--STEP 1: WILL CHECK THE COUNT OF RECORDS

SELECT SUPPLIER_ID,COUNT(*) 
FROM PI_SUPPLIERS_TEMP
GROUP BY SUPPLIER_ID
ORDER BY 1;

SELECT SUPPLIER_ID,COUNT(*) 
  FROM PI_SUPPLIERS_TEMP
GROUP BY SUPPLIER_ID
HAVING COUNT(*) > 1
ORDER BY 1;

--STEP 2: WILL USE PSEUDO COLUMNS TO IDENTIFY THE UNIQUE RECORDS WHICH ARE SYSTEM GENERATED

/* ROWID - PSEUDO COLUMN is used to delete the duplicate records by using aggregate 
function.Either we need to retain the max rowid or min rowid - group function */

SELECT SUPPLIER_ID, ROWID 
  FROM PI_SUPPLIERS_TEMP 
ORDER BY 1;

SELECT SUPPLIER_ID,SUPPLIER_NAME,ROWID 
FROM PI_SUPPLIERS_TEMP 
ORDER BY 1;

--STEP 3:WILL FIND THE MAX OR MIN ROWID TO PICK THE SINGLE RECORD OUT OF DUPLICATES

SELECT SUPPLIER_ID,MAX(ROWID)
FROM PI_SUPPLIERS_TEMP 
GROUP BY SUPPLIER_ID,SUPPLIER_NAME
ORDER BY 1;

--STEP 5:WILL FIND THE EXTRA RECORDS OUT OF THE DUPLICATES

SELECT * FROM PI_SUPPLIERS_TEMP 
WHERE ROWID NOT IN
 (SELECT MAX(ROWID)FROM PI_SUPPLIERS_TEMP 
    GROUP BY SUPPLIER_ID,SUPPLIER_NAME)
ORDER BY 1 ;

--STEP 6: FINALLY, DELETE THE DUPLICATE RECORDS FROM THE TABLE

DELETE FROM PI_SUPPLIERS_TEMP 
WHERE ROWID NOT IN
 (SELECT MAX(ROWID)FROM PI_SUPPLIERS_TEMP 
    GROUP BY SUPPLIER_ID,SUPPLIER_NAME);
             
--FINAL STEP:

SELECT SUPPLIER_ID,COUNT(*) 
FROM PI_SUPPLIERS_TEMP
GROUP BY SUPPLIER_ID
ORDER BY 1;

/* CORRELATED METHOD */

SELECT * FROM PI_SUPPLIERS_TEMP;
SELECT * FROM PI_SUPPLIERS_TEMP ORDER BY 1;
SELECT SUPPLIER_ID,SUPPLIER_NAME,ROWID FROM PI_SUPPLIERS_TEMP ORDER BY 1;

SELECT A.*,ROWID FROM PI_SUPPLIERS_TEMP A
 WHERE ROWID NOT IN (SELECT MIN(ROWID)
                       FROM PI_SUPPLIERS_TEMP B
                      WHERE B.SUPPLIER_ID = A.SUPPLIER_ID
                        AND B.SUPPLIER_NAME = A.SUPPLIER_NAME)
ORDER BY 3 DESC;                        ;

SELECT A.*,ROWID  FROM PI_SUPPLIERS_TEMP A
 WHERE ROWID NOT IN (SELECT MIN(ROWID)
                       FROM PI_SUPPLIERS_TEMP B
                      WHERE B.SUPPLIER_ID = A.SUPPLIER_ID
                        AND B.SUPPLIER_NAME = A.SUPPLIER_NAME);

DELETE FROM PI_SUPPLIERS_TEMP A
WHERE ROWID > (SELECT MIN(ROWID)
                 FROM PI_SUPPLIERS_TEMP B
                WHERE B.SUPPLIER_ID = A.SUPPLIER_ID
                  AND B.SUPPLIER_NAME = A.SUPPLIER_NAME);

SELECT * FROM PI_SUPPLIERS_TEMP;

ROLLBACK;

================================================================================

--SUM OF +VE & -VE NUMBERS:

SELECT * FROM POS_NEG_TAB;
--truncate table pos_neg_tab;

create table pos_neg_tab as select * from pi_jobs;

INSERT INTO pos_neg_tab VALUES('J1','SW1',100,-50);
INSERT INTO pos_neg_tab VALUES('J2','SW2',200,-150);
INSERT INTO pos_neg_tab VALUES('J3','SW3',300,-250);
INSERT INTO pos_neg_tab VALUES('J4','SW4',-100,-350);
INSERT INTO pos_neg_tab VALUES('J5','SW5',-200,-450);
INSERT INTO pos_neg_tab VALUES('J6','SW6',-300,150);
INSERT INTO pos_neg_tab VALUES('J7','SW7',-400,250);
INSERT INTO pos_neg_tab VALUES('J8','SW8',-500,350);

SELECT SUM(CASE WHEN MIN_SALARY >= 0 THEN MIN_SALARY ELSE 0 END) AS POSITIVE1,
SUM(CASE WHEN MIN_SALARY  < 0 THEN MIN_SALARY ELSE 0 END) AS NEGATIVE1,
       
       SUM(CASE WHEN MAX_SALARY >= 0 THEN MAX_SALARY ELSE 0 END) AS POSITIVE2,
       SUM(CASE WHEN MAX_SALARY  < 0 THEN MAX_SALARY ELSE 0 END) AS NEGATIVE2
FROM POS_NEG_TAB;

SELECT * FROM POS_NEG_TAB;

================================================================================